// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	FirebaseAuthScopes = "FirebaseAuth.Scopes"
)

// Defines values for EventEventType.
const (
	EventEventTypeDAIONRYO  EventEventType = "DAIONRYO"
	EventEventTypeOTAKINAGE EventEventType = "OTAKINAGE"
)

// Defines values for VibeVibeType.
const (
	VibeVibeTypeWAKARU VibeVibeType = "WAKARU"
)

// Defines values for AddVibeJSONBodyVibeType.
const (
	AddVibeJSONBodyVibeTypeWAKARU AddVibeJSONBodyVibeType = "WAKARU"
)

// AnonymousUser defines model for AnonymousUser.
type AnonymousUser struct {
	// CreatedAt ユーザー作成日時
	CreatedAt time.Time `json:"created_at"`

	// ProfileTitle 称号（例：「今週の菩薩」）
	ProfileTitle nullable.Nullable[string] `json:"profile_title,omitempty"`

	// UserID 匿名ユーザーの一意識別子
	UserID openapi_types.UUID `json:"user_id"`

	// VirtuePoints 徳ポイント
	VirtuePoints int `json:"virtue_points"`
}

// CreateGrumbleRequest defines model for CreateGrumbleRequest.
type CreateGrumbleRequest struct {
	// Content 愚痴の本文
	Content string `json:"content"`

	// IsEventGrumble イベント投稿か否か
	IsEventGrumble *bool `json:"is_event_grumble,omitempty"`

	// ToxicLevel 毒レベル（1〜5）
	ToxicLevel int `json:"toxic_level"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error エラーコード
	Error string `json:"error"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	// CurrentHp 大怨霊の現在HP
	CurrentHp nullable.Nullable[int] `json:"current_hp,omitempty"`

	// EndTime イベント終了時刻
	EndTime time.Time `json:"end_time"`

	// EventID イベントの一意識別子
	EventID int `json:"event_id"`

	// EventName イベントの名称
	EventName string `json:"event_name"`

	// EventType イベントの種類
	EventType EventEventType `json:"event_type"`

	// IsActive 現在開催中のイベントか否か
	IsActive bool `json:"is_active"`

	// MaxHp 大怨霊の最大HP
	MaxHp nullable.Nullable[int] `json:"max_hp,omitempty"`

	// StartTime イベント開始時刻
	StartTime time.Time `json:"start_time"`
}

// EventEventType イベントの種類
type EventEventType string

// Grumble defines model for Grumble.
type Grumble struct {
	// Content 愚痴の本文
	Content string `json:"content"`

	// ExpiresAt 投稿後24時間後の時刻
	ExpiresAt time.Time `json:"expires_at"`

	// GrumbleID 投稿の一意識別子
	GrumbleID openapi_types.UUID `json:"grumble_id"`

	// HasVibed ログインユーザーが「わかる…」済みか
	HasVibed *bool `json:"has_vibed,omitempty"`

	// IsEventGrumble イベント投稿か否か
	IsEventGrumble bool `json:"is_event_grumble"`

	// IsPurified 成仏フラグ
	IsPurified bool `json:"is_purified"`

	// PostedAt 投稿時刻
	PostedAt time.Time `json:"posted_at"`

	// ToxicLevel 毒レベル（1〜5）
	ToxicLevel int `json:"toxic_level"`

	// UserID 投稿者の匿名ID
	UserID openapi_types.UUID `json:"user_id"`

	// VibeCount 「わかる…」の総数
	VibeCount int `json:"vibe_count"`
}

// Vibe defines model for Vibe.
type Vibe struct {
	// GrumbleID 共感対象の投稿ID
	GrumbleID openapi_types.UUID `json:"grumble_id"`

	// UserID 共感した匿名ユーザーID
	UserID openapi_types.UUID `json:"user_id"`

	// VibeID 共感履歴の一意識別子
	VibeID int `json:"vibe_id"`

	// VibeType 共感の種類
	VibeType VibeVibeType `json:"vibe_type"`

	// VotedAt 共感した時刻
	VotedAt time.Time `json:"voted_at"`
}

// VibeVibeType 共感の種類
type VibeVibeType string

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	ActiveOnly *bool `form:"active_only,omitempty" json:"active_only,omitempty"`
}

// GetGrumblesParams defines parameters for GetGrumbles.
type GetGrumblesParams struct {
	ToxicLevelMin  *int  `form:"toxic_level_min,omitempty" json:"toxic_level_min,omitempty"`
	ToxicLevelMax  *int  `form:"toxic_level_max,omitempty" json:"toxic_level_max,omitempty"`
	UnpurifiedOnly *bool `form:"unpurified_only,omitempty" json:"unpurified_only,omitempty"`
	Limit          *int  `form:"limit,omitempty" json:"limit,omitempty"`
	Offset         *int  `form:"offset,omitempty" json:"offset,omitempty"`
}

// AddVibeJSONBody defines parameters for AddVibe.
type AddVibeJSONBody struct {
	VibeType *AddVibeJSONBodyVibeType `json:"vibe_type,omitempty"`
}

// AddVibeJSONBodyVibeType defines parameters for AddVibe.
type AddVibeJSONBodyVibeType string

// CreateGrumbleJSONRequestBody defines body for CreateGrumble for application/json ContentType.
type CreateGrumbleJSONRequestBody = CreateGrumbleRequest

// AddVibeJSONRequestBody defines body for AddVibe for application/json ContentType.
type AddVibeJSONRequestBody AddVibeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// イベント一覧取得
	// (GET /events)
	GetEvents(c *gin.Context, params GetEventsParams)
	// イベント詳細取得
	// (GET /events/{event_id})
	GetEvent(c *gin.Context, eventID int)
	// タイムライン取得
	// (GET /grumbles)
	GetGrumbles(c *gin.Context, params GetGrumblesParams)
	// 投稿作成
	// (POST /grumbles)
	CreateGrumble(c *gin.Context)
	// 「わかる…」を送る
	// (POST /grumbles/{grumble_id}/vibes)
	AddVibe(c *gin.Context, grumbleID openapi_types.UUID)
	// 自分のユーザー情報取得
	// (GET /users/me)
	GetMyProfile(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(c *gin.Context) {

	var err error

	c.Set(FirebaseAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "active_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "active_only", c.Request.URL.Query(), &params.ActiveOnly)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter active_only: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvents(c, params)
}

// GetEvent operation middleware
func (siw *ServerInterfaceWrapper) GetEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "event_id" -------------
	var eventID int

	err = runtime.BindStyledParameterWithOptions("simple", "event_id", c.Param("event_id"), &eventID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter event_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetEvent(c, eventID)
}

// GetGrumbles operation middleware
func (siw *ServerInterfaceWrapper) GetGrumbles(c *gin.Context) {

	var err error

	c.Set(FirebaseAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGrumblesParams

	// ------------- Optional query parameter "toxic_level_min" -------------

	err = runtime.BindQueryParameter("form", true, false, "toxic_level_min", c.Request.URL.Query(), &params.ToxicLevelMin)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter toxic_level_min: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "toxic_level_max" -------------

	err = runtime.BindQueryParameter("form", true, false, "toxic_level_max", c.Request.URL.Query(), &params.ToxicLevelMax)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter toxic_level_max: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "unpurified_only" -------------

	err = runtime.BindQueryParameter("form", true, false, "unpurified_only", c.Request.URL.Query(), &params.UnpurifiedOnly)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter unpurified_only: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGrumbles(c, params)
}

// CreateGrumble operation middleware
func (siw *ServerInterfaceWrapper) CreateGrumble(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateGrumble(c)
}

// AddVibe operation middleware
func (siw *ServerInterfaceWrapper) AddVibe(c *gin.Context) {

	var err error

	// ------------- Path parameter "grumble_id" -------------
	var grumbleID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "grumble_id", c.Param("grumble_id"), &grumbleID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter grumble_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddVibe(c, grumbleID)
}

// GetMyProfile operation middleware
func (siw *ServerInterfaceWrapper) GetMyProfile(c *gin.Context) {

	c.Set(FirebaseAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMyProfile(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/events", wrapper.GetEvents)
	router.GET(options.BaseURL+"/events/:event_id", wrapper.GetEvent)
	router.GET(options.BaseURL+"/grumbles", wrapper.GetGrumbles)
	router.POST(options.BaseURL+"/grumbles", wrapper.CreateGrumble)
	router.POST(options.BaseURL+"/grumbles/:grumble_id/vibes", wrapper.AddVibe)
	router.GET(options.BaseURL+"/users/me", wrapper.GetMyProfile)
}

type GetEventsRequestObject struct {
	Params GetEventsParams
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse struct {
	Events *[]Event `json:"events,omitempty"`
}

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents401JSONResponse ErrorResponse

func (response GetEvents401JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetEventRequestObject struct {
	EventID int `json:"event_id"`
}

type GetEventResponseObject interface {
	VisitGetEventResponse(w http.ResponseWriter) error
}

type GetEvent200JSONResponse Event

func (response GetEvent200JSONResponse) VisitGetEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvent401JSONResponse ErrorResponse

func (response GetEvent401JSONResponse) VisitGetEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetEvent404JSONResponse ErrorResponse

func (response GetEvent404JSONResponse) VisitGetEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGrumblesRequestObject struct {
	Params GetGrumblesParams
}

type GetGrumblesResponseObject interface {
	VisitGetGrumblesResponse(w http.ResponseWriter) error
}

type GetGrumbles200JSONResponse struct {
	Grumbles *[]Grumble `json:"grumbles,omitempty"`

	// Total 総件数
	Total *int `json:"total,omitempty"`
}

func (response GetGrumbles200JSONResponse) VisitGetGrumblesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGrumbles400JSONResponse ErrorResponse

func (response GetGrumbles400JSONResponse) VisitGetGrumblesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetGrumbles401JSONResponse ErrorResponse

func (response GetGrumbles401JSONResponse) VisitGetGrumblesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateGrumbleRequestObject struct {
	Body *CreateGrumbleJSONRequestBody
}

type CreateGrumbleResponseObject interface {
	VisitCreateGrumbleResponse(w http.ResponseWriter) error
}

type CreateGrumble201JSONResponse Grumble

func (response CreateGrumble201JSONResponse) VisitCreateGrumbleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateGrumble400JSONResponse ErrorResponse

func (response CreateGrumble400JSONResponse) VisitCreateGrumbleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateGrumble401JSONResponse ErrorResponse

func (response CreateGrumble401JSONResponse) VisitCreateGrumbleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddVibeRequestObject struct {
	GrumbleID openapi_types.UUID `json:"grumble_id"`
	Body      *AddVibeJSONRequestBody
}

type AddVibeResponseObject interface {
	VisitAddVibeResponse(w http.ResponseWriter) error
}

type AddVibe201JSONResponse Vibe

func (response AddVibe201JSONResponse) VisitAddVibeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddVibe400JSONResponse ErrorResponse

func (response AddVibe400JSONResponse) VisitAddVibeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddVibe401JSONResponse ErrorResponse

func (response AddVibe401JSONResponse) VisitAddVibeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddVibe404JSONResponse ErrorResponse

func (response AddVibe404JSONResponse) VisitAddVibeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMyProfileRequestObject struct {
}

type GetMyProfileResponseObject interface {
	VisitGetMyProfileResponse(w http.ResponseWriter) error
}

type GetMyProfile200JSONResponse AnonymousUser

func (response GetMyProfile200JSONResponse) VisitGetMyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMyProfile401JSONResponse ErrorResponse

func (response GetMyProfile401JSONResponse) VisitGetMyProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// イベント一覧取得
	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// イベント詳細取得
	// (GET /events/{event_id})
	GetEvent(ctx context.Context, request GetEventRequestObject) (GetEventResponseObject, error)
	// タイムライン取得
	// (GET /grumbles)
	GetGrumbles(ctx context.Context, request GetGrumblesRequestObject) (GetGrumblesResponseObject, error)
	// 投稿作成
	// (POST /grumbles)
	CreateGrumble(ctx context.Context, request CreateGrumbleRequestObject) (CreateGrumbleResponseObject, error)
	// 「わかる…」を送る
	// (POST /grumbles/{grumble_id}/vibes)
	AddVibe(ctx context.Context, request AddVibeRequestObject) (AddVibeResponseObject, error)
	// 自分のユーザー情報取得
	// (GET /users/me)
	GetMyProfile(ctx context.Context, request GetMyProfileRequestObject) (GetMyProfileResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(ctx *gin.Context, params GetEventsParams) {
	var request GetEventsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEvent operation middleware
func (sh *strictHandler) GetEvent(ctx *gin.Context, eventID int) {
	var request GetEventRequestObject

	request.EventID = eventID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvent(ctx, request.(GetEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetEventResponseObject); ok {
		if err := validResponse.VisitGetEventResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetGrumbles operation middleware
func (sh *strictHandler) GetGrumbles(ctx *gin.Context, params GetGrumblesParams) {
	var request GetGrumblesRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGrumbles(ctx, request.(GetGrumblesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGrumbles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGrumblesResponseObject); ok {
		if err := validResponse.VisitGetGrumblesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateGrumble operation middleware
func (sh *strictHandler) CreateGrumble(ctx *gin.Context) {
	var request CreateGrumbleRequestObject

	var body CreateGrumbleJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateGrumble(ctx, request.(CreateGrumbleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateGrumble")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateGrumbleResponseObject); ok {
		if err := validResponse.VisitCreateGrumbleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddVibe operation middleware
func (sh *strictHandler) AddVibe(ctx *gin.Context, grumbleID openapi_types.UUID) {
	var request AddVibeRequestObject

	request.GrumbleID = grumbleID

	var body AddVibeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddVibe(ctx, request.(AddVibeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddVibe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AddVibeResponseObject); ok {
		if err := validResponse.VisitAddVibeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMyProfile operation middleware
func (sh *strictHandler) GetMyProfile(ctx *gin.Context) {
	var request GetMyProfileRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetMyProfile(ctx, request.(GetMyProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMyProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetMyProfileResponseObject); ok {
		if err := validResponse.VisitGetMyProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
